/*
* Build file for authorization server common
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'eclipse'

buildscript {
	project.ext {
        // ahming notes: 注意，未升级auth-server的springboot版本，因为升级可能影响相关配置或改动代码等 ==> 已升级
        // see parent //springBootVersion = '1.5.3.RELEASE'
        // see parent //gradleDockerVersion = '1.2'

         jarName = 'basic-auth-server-common'
        //versionName = '0.0.1'
        //versionName = rootProject.getProperty("version")
        versionName = getVersionNameShort()
	}
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        // see parent //classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

// Used by the Docker gradle plugin, group refers to the account under which the docker image is created
group = 'neoframework'
mainClassName = 'com.anilallewar.microservices.auth.AuthServerApplication'
// see parent //sourceCompatibility = 1.7
// see parent //targetCompatibility = 1.7

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {
  imports {
    // see parent //mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR3'
  }
}

dependencies {
    // Basic Spring boot with config client
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-freemarker")

    // Spring OAuth2 security
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.security:spring-security-jwt")

    // Eureka client
    compile('org.springframework.cloud:spring-cloud-starter-eureka')

    // JPA for persisting user data
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("mysql:mysql-connector-java:5.1.30")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")

    // 验证码
    compile 'com.github.axet:kaptcha:0.0.9'

    // base common api dependency
    compile project(':base-common')
}

jar {
    baseName = "${project.jarName}"
    version =  "${project.versionName}"
}

/*
 * 生成版本设定属性文件.
 * TODO: 若为支持子项目独立自定义版本，可在子项目这里自定义 getVersionName 相应处理。目前暂统一使用 rootProject 的定义
 */
processResources.doLast {
    if (rootProject.hasProperty("build_type")) {
        println "generate version properties for ${project.name}"
        def configFile = new File('build/resources/main/version.properties')
        configFile.withOutputStream { os ->
            os << '# Auto generated version properties\n'
            os << 'name=' + project.name + '\n'
            os << 'version=' + version + '\n'
            os << 'versionDetail=' + getVersionName(version) + '\n'
            os << 'versionCode=' + getVersionCode(version) + '\n'
        }
    }
}

/*
* This task builds the docker image by copying the output of the "jar" gradle command
* and moving it to the "build/docker" directory which is used as the staging directory
* by the docker gradle plugin. We then build the docker image by invoking the appropriate
* Dockerfile.
*/
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  tagVersion = jar.version
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    // Copy the built fat jar to the Docker plugin staging directory
    copy {
      from jar
      into stageDir
    }
    // Copy the run.sh file to the Docker plugin staging directory
    copy {
      from "${project.buildDir}/resources/main/run.sh"
      into stageDir
    }
  }
}

run {
    // 去掉 ,'-Dspring.profiles.active=default'
    // 目的使 IDE 运行，本地命令行和服务器运行均以 config-server 为准，保持各处日志等一致
    // jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4100,suspend=n']
    if (project.hasProperty('rebelAgent')) {
        jvmArgs += rebelAgent
    }
}
